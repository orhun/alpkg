#!/usr/bin/env bash

set -e
_VERSION="0.0.1"

#=======================  C o n s t a n t s  =======================#

PACKAGER=""
APORTS_URL=""
APORTS_UPSTREAM_URL="https://gitlab.alpinelinux.org/alpine/aports"
export ARCH=${ARCH:="x86_64"}
export CHROOT_DIR=${CHROOT_DIR:="/alpine"}
export APORTS_DIR=${APORTS_DIR:="$HOME/aports"}
export PACKAGE_DIR=${PACKAGE_DIR:="$HOME/apkbuilds"}
export ALPINE_BRANCH=${ALPINE_BRANCH:="latest-stable"}
export ALPINE_PACKAGES=${ALPINE_PACKAGES:="build-base doas bash bash-doc bash-completion alpine-sdk atools vim zellij"}
export CHROOT_KEEP_VARS=${CHROOT_KEEP_VARS:="ARCH TERM SHELL PACKAGE_DIR"}

#=======================  F u n c t i o n s  =======================#

show-usage() {
  echo "https://github.com/orhun/alpkg ($_VERSION)"
  echo ""
  echo "Usage: alpkg [init|edit|fetch|update] [<package>]"
  echo ""
  echo "Commands:"
  echo "  init              Initialize an Alpine chroot."
  echo "  edit <package>    Edit or create a package."
  echo "  fetch <package>   Fetch an existing package from the remote repository."
  echo "  update <package>  Update the package on the remote repository."
  echo "  destroy           Remove the chroot and repository."
  echo ""
  echo "Options:"
  echo "  --packager \"Your Name <your@email.address>\"              The name and email address of the package maintainer."
  echo "  --aports \"https://gitlab.alpinelinux.org/<user>/aports\"  The URL of the remote APorts repository."
  echo ""
  echo "Environment variables:"
  echo "  CHROOT_DIR   Directory for Alpine chroot. (default: /alpine)"
  echo "  APORTS_DIR   Directory for remote APorts repository. (default: $HOME/aports)"
  echo "  PACKAGE_DIR  Directory for APK packages built and stored. (default: $HOME/apkbuilds in chroot)"
  exit 0
}

create-pkg-script() {
  cat <<-'_EOF_' >"$CHROOT_DIR/$PACKAGE_DIR/pkg.sh"
		#!/usr/bin/env bash
		set -e
    export SHELL=bash
		pkg=""
		lint_pkg=false
		edit_pkg=true
		layout_file="$PACKAGE_DIR/pkg-edit-layout.kdl"
		while getopts ":lhe" opt; do
		  case ${opt} in
		  e)
		    edit_pkg=true
		    ;;
		  l)
		    lint_pkg=true
		    ;;
		  h)
		    echo "Usage: $0 [-e] [-l] [-h] <package>"
		    echo "Options:"
		    echo -e "\t-e: Edit the APKBUILD file"
		    echo -e "\t-l: Lint the APKBUILD file"
		    echo -e "\t-h: Show this help message"
		    exit 0
		    ;;
		  esac
		done
		cd "$PACKAGE_DIR" || exit
		pkg="${@: -1}"
		if [ ! -d "$pkg" ]; then
		  newapkbuild "${@}"
		fi
		cd "${pkg}" || exit
		if [ "$lint_pkg" = true ]; then
		  apkbuild-lint APKBUILD
		elif [ "$edit_pkg" = true ]; then
		  zellij --layout "${layout_file}"
		fi
	_EOF_
  chmod +x "$CHROOT_DIR/$PACKAGE_DIR/pkg.sh"
}

create-zellij-layout() {
  cat <<-'_EOF_' >"$CHROOT_DIR/$PACKAGE_DIR/pkg-edit-layout.kdl"
    // https://zellij.dev/documentation/layouts
    layout {
        pane split_direction="vertical" {
            pane focus=true command="vim" {
		          args "APKBUILD"
	          }
            pane
        }
    }
	_EOF_
}

init-chroot() {
  [ "$(id -u)" -eq 0 ] || _sudo='sudo -E'
  installer='alpine-chroot-install'
  if ! command -v "$installer" &>/dev/null; then
    echo "$installer could not be found!"
    exit 1
  fi
  echo "Creating a chroot in $CHROOT_DIR"
  $_sudo "$installer"
  echo "Preparing the build environment..."
  "$CHROOT_DIR/enter-chroot" bash <<-_EOF_
		adduser "$USER" wheel
		echo "permit nopass :wheel" >/etc/doas.d/doas.conf
		adduser "$USER" abuild
		mkdir -p "$PACKAGE_DIR"
		chown "$USER" "$PACKAGE_DIR"
		mkdir -p /var/cache/distfiles
		chgrp abuild /var/cache/distfiles
		chmod g+w /var/cache/distfiles
		echo "PACKAGER=\"$PACKAGER\"" >>/etc/abuild.conf
		echo 'MAINTAINER="$PACKAGER"' >>/etc/abuild.conf
	_EOF_
  run abuild-keygen -a -i -n

  echo "Creating scripts..."
  create-pkg-script
  create-zellij-layout
}

init-aports() {
  echo "Setting up the aports repository in $APORTS_DIR"
  git clone "$APORTS_URL" "$APORTS_DIR"
  cd "$APORTS_DIR"
  git remote add base "$APORTS_UPSTREAM_URL"
  cat <<-'_EOF_' >".git/hooks/prepare-commit-msg"
		#!/bin/sh
		# https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Commit_your_work
		case "$2,$3" in
		  ,|template,)
		    if git diff-index --diff-filter=A --name-only --cached HEAD \
		        | grep -q '/APKBUILD$'; then
		      meta() { git diff --staged | grep "^+$1" | sed 's/.*="\?//;s/"$//';}
		      printf 'testing/%s: new aport\n\n%s\n%s\n' "$(meta pkgname)" \
		        "$(meta url)" "$(meta pkgdesc)" "$(cat $1)" > "$1"
		    else
		      printf '%s\n\n%s' `git diff-index --name-only --cached HEAD \
		        | sed -n 's/\/APKBUILD$//p;q'` "$(cat $1)" > "$1"
		    fi;;
		esac
	_EOF_
  chmod +x ".git/hooks/prepare-commit-msg"
  if [[ ! $(git config --get user.name) ]]; then
    git config user.name "$(echo "${PACKAGER%%<*}" | xargs)"
  fi
  if [[ ! $(git config --get user.email) ]]; then
    git config user.email "$(echo "${PACKAGER#*<}" | tr -d '[:space:]>')"
  fi
}

fetch-pkg() {
  cd "$APORTS_DIR"
  git stash
  git checkout master
  git pull base master
  apkbuild=$(find "$(pwd)" -wholename "*/$1/APKBUILD")
  if [ -z "${apkbuild}" ]; then
    echo "Package is not found!"
    exit 1
  fi
  mkdir "$CHROOT_DIR/$PACKAGE_DIR/$1" || true
  cp "$apkbuild" "$CHROOT_DIR/$PACKAGE_DIR/$1"
  run "$PACKAGE_DIR/pkg.sh" "$1"
}

update-pkg() {
  run "$PACKAGE_DIR/pkg.sh" -l "$1"
  cd "$APORTS_DIR"
  git stash
  git checkout master
  git pull base master
  apkbuild=$(find "$(pwd)" -wholename "*/$1/APKBUILD")
  if [ -z "${apkbuild}" ]; then
    mkdir "$APORTS_DIR/testing/$1"
    apkbuild="$APORTS_DIR/testing/$1/APKBUILD"
    echo "Adding a new package to aports."
  else
    echo "Package is found in aports."
  fi
  git branch -D "aport/$1" || true
  git checkout -b "aport/$1"
  cp "$CHROOT_DIR/$PACKAGE_DIR/$1/APKBUILD" "$apkbuild"
  git add "$apkbuild"
  git commit
  git show
}

run() {
  if [ ! -d "$CHROOT_DIR" ]; then
    echo "$CHROOT_DIR is not found. Did you create the chroot?"
    exit 1
  fi
  "$CHROOT_DIR/enter-chroot" -u "$USER" "${@}"
}

destroy() {
  echo rm -rf "$APORTS_DIR"
  echo rm -rf "$PACKAGE_DIR"
  "$CHROOT_DIR/destroy" --remove
}

#============================  M a i n  ============================#

case "$1" in
init)
  if [ "$#" -ne 5 ] || [ "$2" != "--packager" ] || [ "$4" != "--aports" ]; then
    show-usage
  fi
  PACKAGER="${3//\"/}"
  APORTS_URL="${5//\"/}"
  init-chroot
  init-aports
  echo "Ready for packaging!"
  ;;
edit)
  run "$PACKAGE_DIR/pkg.sh" "${@:2}"
  ;;
fetch)
  fetch-pkg "$2"
  ;;
update)
  update-pkg "$2"
  ;;
destroy)
  destroy
  ;;
*)
  show-usage
  ;;
esac

# vim: set ts=2:
